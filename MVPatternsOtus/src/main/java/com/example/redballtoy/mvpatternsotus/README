[OTUS] Android-разработчик. Продвинутый курс (2019)\17. MVx patterns in Android
Зачем нужна архитектура:
    - распределить ответственность между классами
    - разбить огромную Activity на несколько небольших классов
    - разделить разработку экрана на несколько человек
    - изменения в одном классе не ведут к переписыванию остальных
    - намного проще все покрыть тестами
    - позволяет переиспользовать код

Виды архитектурных паттернов:
    - MVC
        - устарел с появлением возможности перерисовки части экрана
        - view перересовывалась целиком в соответствие с изменением модели
        Действующие лица:
            - View
                - отвечает за отображение UI на экране
            - Model
                - данные нашего приложения, логика их получения и хранения
                - часто основана на БД или результатов от веб серверов
            - Controller
                - обрабатывает действия пользователя и затем обновляет Model или View
                        - например:
                            - Ввод:
                                - Нttp
                                - Клавиатура
                                - Мышь и т.д.

        Взаимодействия - отличается от реализации но наиболее правильный вариант когда
                контроллер взаимодействует и с View и с Model
            Controller -> Model - изменяет модель
            Controller -> View - оповещает View об изменении Model
            View -> Model - запрашивает измененные данные у модели
            Model -> View -> - вьюшка получает данные от модели и отображает их

        Недостатки:
            - не отвечает требованиям текущего дня потому что появились виджеты
            - перересовывлся весь экран

    - MVP
        - возник как альтернатива MVC
        - количество связей между сущностями уменьшилось
        - позволяет отделить логику отображения от отрисовки UI
            - логика отображения определяет как должны меняться или перерисоваться элементы
                экрана при изменении части элементов экрана
        - позволяет свести к минимуму код не покрытый тестами

        Действующие лица:
           - View
               - отвечает за отображение UI на экране и пользовательские итерации
          - Model
              - данные нашего приложения, логика их получения и хранения
                 - часто основана на БД или результатов от веб серверов
          - Presenter
              - содержит всю UI логику и отвечает за синронизацию модели и представления и связывание
                    их вместе
              - когда View уведомляет Presenter он принимает решение об обновлении модели
                    и синхронизирует все изменения между моделью и представлением

         Взаимодействия:
            Ввод ->         View -> Presenter ->    Model
            Отображение <-  View <- Presenter <-    Model

            - View получает пользовательский ввод и уведомляет Presenter что что то изменилось
            - Presenter может запросить данные у модели или просто обновить вьюшку
            - Модель пожет получать данные из БД, сервера или кеша и отдает данные презентеру
            - презентер раскладывает данные на View

         Структура папочек:
         mvp
            - model
                MainRepository - интерфейс и реализация класса Repository который будет хранить
                MainRepositoryImpl - и обновлять данные
            - presenter
                MainPresenter
                MainPresenterImpl
            - view
                MainView
                MainViewImpl
            MainActivity


         Варианты создания View
            - независимый компонент строящий себя на rootView
            - кастомная Android View, наследующая интерфейс MainView
            - Activity/Fragmant наследующие MainView



    - MVVM
    - MVI
    - VIPER


